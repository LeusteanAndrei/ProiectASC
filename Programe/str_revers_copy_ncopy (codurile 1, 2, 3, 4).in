.section .rodata

string: .space 100
strcpy:.space 100
len: .space 4
n: .space 4
prreadstr: .asciz "Please inpute string:\n"
prreadint: .asciz "Please input integer:\n"
readstr:.asciz "%s"
readint: .asciz "%d"

prtlen: .asciz "The length of the string is: %d\n"
prtcopy: .asciz "The copied string is: %s\n"
prtncopy: .asciz "The first %d letters are: %s\n"
prtrev: .asciz "The reversed string is: %s\n"

.section .text
.global main

strlen:
        # a0 = const char *str
        addi sp, sp, -12
        sw ra, 0(sp)
        sw t0, 4(sp)
        sw t1, 8(sp)
        
        li     t0, 0         # i = 0
    1: # Start of for loop
        add    t1, t0, a0    # Add the byte offset for str[i]
        lb     t1, 0(t1)     # Dereference str[i]
        beqz   t1, 1f        # if str[i] == 0, break for loop
        addi   t0, t0, 1     # Add 1 to our iterator
        j      1b            # Jump back to condition (1 backwards)
    1: # End of for loop
        mv     a0, t0        # Move t0 into a0 to return
        
        lw ra, 0(sp)
        lw t0, 4(sp)
        lw t1, 8(sp)
        addi sp, sp, 12
        ret                  # Return back via the return address register

stringcopy:
        addi sp, sp, -4 
        sw ra, 0(sp)
        
        # a0 = destination
        # a1 = source
    1:
        lb      t0, 0(a1)    # Load a char from the src
        sb      t0, 0(a0)    # Store the value of the src
        beqz    t0, 1f       # Check if it's 0
        addi    a0, a0, 1    # Advance destination one byte
        addi    a1, a1, 1    # Advance source one byte
        j       1b           # Go back to the start of the loop
    1:
        lw ra, 0(sp)
        addi sp, sp, 4

        ret                  # Return back via the return address

strncpy:
        addi sp, sp, -4 
        sw ra, 0(sp)
        # a0 = char *dst
        # a1 = const char *src
        # a2 = unsigned long n
        # t0 = i
        li      t0, 0        # i = 0
    1:  # first for loop
        bge     t0, a2, 1f   # break if i >= n
        add     t1, a1, t0   # src + i
        lb      t1, 0(t1)    # t1 = src[i]
        beqz    t1, 1f       # break if src[i] == '\0'
        add     t2, a0, t0   # t2 = dst + i
        sb      t1, 0(t2)    # dst[i] = src[i]
        addi    t0, t0, 1    # i++
        j       1b           # back to beginning of loop
    1:  # second for loop
        
        bge     t0, a2, 1f   # break if i >= n
        add     t1, a0, t0   # t1 = dst + i
        sb      zero, 0(t1)  # dst[i] = 0
        addi    t0, t0, 1    # i++
        j       1b           # back to beginning of loop
    1:
        # we don't have to move anything since
        # a0 hasn't changed.
        add a0, a0, a2
        sb zero, 0(a0)
        lw ra, 0(sp)
        addi sp, sp, 4

        ret                  # return via return address register 

strrev:
        # s1 = str
        # a0 = sz
        # t0 = sz / 2
        # t1 = i
        # Enter stack frame
        addi    sp, sp, -16
        sd      ra, 0(sp)
        sd      s1, 8(sp)
        # Get the size of the string
        mv      a0, s1
        call    strlen
        srai    t0, a0, 1     # Divide sz by 2
        li      t1, 0         # i = 0
    1:  # for loop
        bge     t1, t0, 1f
        add     t2, s1, t1    # str + i
        sub     t3, a0, t1    # sz - i
        addi    t3, t3, -1    # sz - i - 1
        add     t3, t3, s1    # str + sz - i - 1
        lb      t4, 0(t2)     # str[i]
        lb      t5, 0(t3)     # str[sz - i - 1]
        sb      t4, 0(t3)     # swap
        sb      t5, 0(t2)
        addi    t1, t1, 1
        j       1b
    1:
        # Leave stack frame
        ld      s1, 8(sp)
        ld      ra, 0(sp)
        addi    sp, sp, 16
        ret

main:

la a0, prreadstr
call printf

la a1, string
la a0, readstr
call scanf

la a0, prreadint
call printf
la a1, n
la a0, readint
call scanf

la a0, string
call strlen
la a1, len
sw a0, 0(a1)
mv a1, a0
la a0, prtlen
call printf

la a0, strcpy
la a1, string
call stringcopy
la a1, strcpy
la a0, prtcopy
call printf

la a0, strcpy
la a1, string
la a2, n
lw a2, 0(a2)
call strncpy

la a2, strcpy
la a1, n
lw a1, 0(a1)
la a0, prtncopy
call printf

la s1, string
call strrev
la a1, string
la a0, prtrev
call printf

ret


